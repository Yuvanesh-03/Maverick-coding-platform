rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 👤 Users - Enhanced rules for user management
    match /users/{userId} {
      // Users can read and write their own user document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admins to read all user documents
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow admin token access
      allow read: if request.auth != null;
      
      allow create: if request.auth != null
                    && request.auth.uid == userId
                    && !exists(/databases/$(database)/documents/users/$(userId));

      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && exists(/databases/$(database)/documents/users/$(userId));

      allow delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // 🏆 Hackathons - Enhanced rules
    match /hackathons/{hackathonId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && (
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        request.auth.token.admin == true
      );
    }
    
    // 📝 Hackathon Requests - Enhanced rules
    match /hackathonRequests/{requestId} {
      // Users can create and read their own, admins can read all
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
      
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Token-based admin access
      allow create: if request.auth != null;
      allow read: if request.auth != null && (
        request.auth.token.admin == true ||
        resource.data.userId == request.auth.uid ||
        resource.data.status == 'approved'
      );
      allow update: if request.auth != null && request.auth.token.admin == true;
      allow delete: if false;
    }
    
    // 🎟️ Hackathon Registrations
    match /hackathonRegistrations/{registrationId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // 🗓️ Daily Missions - Enhanced rules
    match /dailyMissions/{missionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }
    
    // 🧠 Company Questions
    match /companyQuestions/{docId} {
      allow read, create: if request.auth != null;
      allow update, delete: if false;
    }
    
    // 📚 Concept Questions
    match /questions/{docId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && !exists(/databases/$(database)/documents/questions/$(docId));
      allow update, delete: if false;
    }
    
    // 📝 Concept Attempts
    match /conceptAttempts/{docId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
    
    // 📊 Assessment Results - Enhanced rules
    match /assessmentResults/{resultId} {
      // Users can read/write own; admins read all
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Token-based access
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.token.admin == true
      );
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.auth.token.admin == true
      );
      allow update, delete: if false;
    }
    
    // 🔔 Notifications - Enhanced rules
    match /notifications/{notificationId} {
      // Users can read and write their own
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || request.auth.uid == request.resource.data.userId);
      
      // Token-based access
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.token.admin == true
      );
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.auth.token.admin == true
      );
      allow update: if request.auth != null &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["isRead"]) &&
        (
          resource.data.userId == request.auth.uid ||
          request.auth.token.admin == true
        );
      allow delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // 💬 Discussion Threads - Enhanced rules with subcollections
    match /discussionThreads/{threadId} {
      allow read, write: if request.auth != null;
    }
    
    match /discussions/{threadId} {
      allow create, read: if request.auth != null;
      allow update: if request.auth != null &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(["replyCount", "repliedBy", "upvotes", "downvotes", "upvotedBy", "downvotedBy"]);
      allow delete: if request.auth != null && (
        request.auth.token.admin == true ||
        resource.data.userId == request.auth.uid
      );

      // Replies Subcollection
      match /replies/{replyId} {
        allow create, read: if request.auth != null;
        allow update: if request.auth != null &&
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(["upvotes", "downvotes", "upvotedBy", "downvotedBy"]);
        allow delete: if request.auth != null && (
          request.auth.token.admin == true ||
          resource.data.userId == request.auth.uid
        );
      }
    }
    
    // 📚 Knowledge Base - Enhanced rules
    match /knowledgeBase/{docId} {
      allow read, write: if request.auth != null;
    }
    
    match /knowledge/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // 🧪 Custom Assessments
    match /customAssessments/{docId} {
      allow read, create: if request.auth != null;
      allow update, delete: if false;
    }
    
    // 🏆 Leaderboard
    match /leaderboard/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null
                             && request.auth.uid == userId
                             // Only these fields can be written
                             && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatar', 'latestScore', 'questionsSolved'])
                             // Validate score range
                             && request.resource.data.latestScore >= 0 && request.resource.data.latestScore <= 100
                             // Ensure solved count is only incremented by 1 on updates
                             && (
                               !exists(/databases/$(database)/documents/leaderboard/$(userId)) ||
                               request.resource.data.questionsSolved == resource.data.questionsSolved + 1
                             );
      allow delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // 🎙️ Mock Interview Sessions
    match /mockInterviewSessions/{sessionId} {
      allow read, update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if false; // Or admin only
    }
    
    // 🛤️ Learning Paths
    match /learningPaths/{pathId} {
      allow read, write: if request.auth != null;
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
